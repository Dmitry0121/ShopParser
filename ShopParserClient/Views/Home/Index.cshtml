<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Работа с сервером в KnockoutJS</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css">

    <script src="https://code.jquery.com/jquery-2.2.3.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/knockout/knockout-3.4.0.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>

</head>
<body>

    <div id="todoList" class="conteiner wrapper">
        <div class="form-inline new-task">
            <!--<div class="form-group">
            <input class="form-control" type="text" data-bind="textInput: newTaskTitle">
        </div>

        <div class="form-group">
            <button class="btn" data-bind="click: addTask">add</button>
        </div>-->
        </div>

        <!--<div class="row">
        <div class="new-task col-lg-6">
            <h3>Task</h3>
            <div data-bind="visible: tasks().length">
                <ul data-bind="foreach: tasks">
                    <li class="new-task checkbox">
                        <label data-bind="click:  $parent.checkTask">
                            <input type="checkbox">
                            <span data-bind="text: title"></span>
                            <a class="remove-task" href="#" data-bind="click: $parent.removeTask">
                                (remove)
                            </a>
                        </label>
                    </li>
                </ul>
            </div>
            <div data-bind="visible: !tasks().length">
                no tasks
            </div>
        </div>-->
        <!--<div class="new-task col-lg-6">
        <h3>Complete</h3>
        <div data-bind="visible: completeTasks().length">
            <ul data-bind="foreach: completeTasks">
                <li class="task">
                    <span data-bind="text: title"></span>
                    <a class="undo-task" href="#" data-bind="click: $parent.undoTask">
                        (undo)
                    </a>
                </li>
            </ul>
        </div>
        <div data-bind="visible: !completeTasks().length">
            no tasks
        </div>
    </div>-->

        <div class="new-task col-lg-6">
            <h3>Products</h3>
            <div>
                <table data-bind="foreach: products">
                    <tr>
                        <td data-bind="text: Title"></td>
                        <td data-bind="text: Characteristic"></td>
                    </tr>
                </table>
            </div>
        </div>

        <button class="btn" data-bind="click: getAll">GetAll</button>

    </div>
    </div>

    <script>

            ////////function dealModel()
            ////////{
            ////////    var self = this;
            ////////    self.products = ko.observableArray([]);
            ////////    $.getJSON("http://localhost:14216/api/ParserApi", function (data)
            ////////    {
            ////////        self.products(data);
            ////////    });               
            ////////}
            ////////ko.applyBindings(new dealModel());





        (function (ko)
        {
            var ChecklistViewModel = function (checklist)
            {
                var self = this;

                this.checklist = checklist;//link on main model
                this.newTaskTitle = ko.observable('');
                this.tasks = ko.observableArray();
                this.completeTasks = ko.observableArray();
                this.products = ko.observableArray();
                                
                this.addTask = function ()
                {
                    this.checklist.addTask(this.newTaskTitle());
                    this.newTaskTitle('');
                    this.tasks(this.checklist.tasks);
                };

                this.removeTask = function (taskObject, event)
                {
                    self.checklist.removeTask(taskObject.id);
                    self.tasks(self.checklist.tasks);
                };

                this.checkTask = function (taskObject, event)
                {
                    self.checklist.checkTask(taskObject.id);
                    self.tasks(self.checklist.tasks);
                    self.completeTasks(self.checklist.completeTasks);
                };

                this.undoTask = function (taskObject, event)
                {
                    self.checklist.undoTask(taskObject.id);
                    self.tasks(self.checklist.tasks);
                    self.completeTasks(self.checklist.completeTasks);
                };

                this.getAll = function ()
                {
                    this.checklist.getAll();
                    this.products(this.checklist.products);
                };
            };

            //main model
            var Checklist = function ()
            {                
                this.tasks = [];
                this.completeTasks = [];
                this.products = [];

                //var self = this;
                //self.products = ko.observableArray();
                
                this.addTask = function (taskTitle)
                {
                    this.tasks.push({
                        id: this.tasks.length,
                        title: taskTitle
                    });
                };

                this.removeTask = function (id)
                {
                    var tastIndex = this.getIndexById(id, this.tasks);

                    if (typeof tastIndex !== 'undefined')
                    {
                        this.tasks.splice(tastIndex, 1);
                    }
                };

                this.checkTask = function (id)
                {
                    var tastIndex = this.getIndexById(id, this.tasks),
                        task;

                    if (typeof tastIndex !== 'undefined')
                    {
                        task = this.tasks[tastIndex];
                        this.tasks.splice(tastIndex, 1);
                        this.completeTasks.push(task);
                    }
                };

                this.undoTask = function (id)
                {
                    var tastIndex = this.getIndexById(id, this.completeTasks),
                        task;

                    if (typeof tastIndex !== 'undefined')
                    {
                        task = this.completeTasks[tastIndex];
                        this.completeTasks.splice(tastIndex, 1);
                        this.tasks.push(task);
                    }
                };

                this.getIndexById = function (id, tasks)
                {
                    var index;

                    for (var i = 0, max = tasks.length; i < max; i++)
                    {
                        if (tasks[i].id === id)
                        {
                            index = i;
                            break;
                        }
                    }

                    return index;
                };
                
                this.getAll = function ()
                {
                    //$.getJSON("http://localhost:14216/api/ParserApi", function (data)
                    //{
                    //    //self.products(data);
                    //    //this.products.push(data);
                    //    //products = JSON.parse(data);

                    //    $.each(data, function (index, product)
                    //    {
                    //        this.products.push({
                    //            Title: product.Title,
                    //            Characteristic: product.Characteristic
                    //        });
                            
                    //    });                       
                        
                    //});

                    alert("11");

                    $.ajax({
                        type: 'GET',
                        url: 'http://localhost:14216/api/ParserApi',
                        dataType: 'json'
                     }).success(this.successHandler).error(this.errorHandler);
                };

                this.successHandler = function (data)
                {
                    alert("Success!");
                    this.products(data);
                    //$.each(data, function (index, product)
                    //{
                    //    this.products.push({
                    //        id: this.products.length,
                    //            title: product.Title,
                    //            characteristic: product.Characteristic
                    //        });
                    //});   
                };
                this.errorHandler = function ()
                {
                    alert("Error!");
                };

            };

            //////////function dealModel()
            //////////{
            //////////    var self = this;
            //////////    self.products = ko.observableArray([]);

            //////////    $.getJSON("http://localhost:14216/api/ParserApi", function (data)
            //////////    {
            //////////        self.products(data);
            //////////    });
            //////////}
            //////////ko.applyBindings(new dealModel());

            //////////
            //////////$.getJSON("http://localhost:14216/api/ParserApi", function (data)
            //////////{
            //////////    checklist.products(data);
            //////////});

            var checklist = new Checklist();
            ko.applyBindings(new ChecklistViewModel(checklist), document.getElementById('todoList'));

        })(ko);



    </script>
</body>
</html>